/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package cat.prcetrencada.assemblycat.view;

import cat.prcetrencada.assemblycat.model.entitieslayer.Game;
import cat.prcetrencada.assemblycat.model.enums.PersistanceTech;
import static cat.prcetrencada.assemblycat.presenter.Presenter.redirect;
import static cat.prcetrencada.assemblycat.presenter.SelectionPresenter.*;
import cat.prcetrencada.assemblycat.presenter.fetch.DataFetcherPresenter;
import java.awt.GridLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.ExecutionException;
import java.util.stream.IntStream;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * Panell de SelecciÃ³ de jocs a actualitzar
 * @author @Narx221 Projecte 'Ce' Trencada
 */
public class Select extends javax.swing.JPanel {
    public Select() throws IOException, InterruptedException, ExecutionException {
        initComponents();
        
        HashMap fetchMatchingData = DataFetcherPresenter.getInstance().fetchMatchingData(PersistanceTech.JSON);
        gamesList= (ArrayList)fetchMatchingData.get("gamesInstalledList");
        
        //Set raw model fields
        Object[][] rawModel = new Object[gamesList.size()][3];
        IntStream.range(0, gamesList.size()).forEach(s->{
                    Game game =(Game)gamesList.get(s);
                    rawModel[s][0]=game.getName();
                    rawModel[s][1]=game.getDirectory();
                    rawModel[s][2]=false;
        });

        //Set DefaultTableModel
        javax.swing.table.DefaultTableModel tableModel = new javax.swing.table.DefaultTableModel(
                rawModel,
                new String [] {
                    "Joc", "Directori", "Actualitzar"
                }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        gameUpdateTable.setModel(tableModel);
        this.tableModel=tableModel;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        introLabel = new javax.swing.JLabel();
        gamePanel = new javax.swing.JScrollPane();
        selectionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gameUpdateTable = new javax.swing.JTable();
        allCheckBox = new javax.swing.JCheckBox();
        updateButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 204));

        introLabel.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        introLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        introLabel.setText("Quins jocs vols actualitzar?");
        introLabel.setToolTipText(null);

        selectionPanel.setLayout(new java.awt.GridLayout(1, 0));
        selectionPanelLayout=(GridLayout)selectionPanel.getLayout();

        gameUpdateTable.setModel(new javax.swing.table.DefaultTableModel());
        jScrollPane1.setViewportView(gameUpdateTable);

        selectionPanel.add(jScrollPane1);

        gamePanel.setViewportView(selectionPanel);

        allCheckBox.setText("   Tots");
        allCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                allCheckBoxItemStateChanged(evt);
            }
        });

        updateButton.setText("Actualitza");
        updateButton.setToolTipText("");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(allCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(updateButton)
                .addGap(18, 18, 18))
            .addComponent(introLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(introLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allCheckBox)
                .addGap(18, 18, 18)
                .addComponent(updateButton)
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        TableModel model = this.gameUpdateTable.getModel();
        
        Update updateFrame = buildTargetUpdateFrame(gamesList, allCheckBox.isSelected(),model);
        if (updateFrame!=null) {
           redirect(this.getParent(), updateFrame);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void allCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_allCheckBoxItemStateChanged
        if (allCheckBox.isSelected()) {
            IntStream.range(0, gameUpdateTable.getRowCount()).forEach(s->{
                tableModel.setValueAt(true, s, 2);
            });
        }else{
            IntStream.range(0, gameUpdateTable.getRowCount()).forEach(s->{
                tableModel.setValueAt(false, s, 2);
            });
        }
    }//GEN-LAST:event_allCheckBoxItemStateChanged
    private GridLayout selectionPanelLayout;
    public DefaultTableModel tableModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allCheckBox;
    private javax.swing.JScrollPane gamePanel;
    public javax.swing.JTable gameUpdateTable;
    private javax.swing.JLabel introLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private ArrayList<Game> gamesList;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
